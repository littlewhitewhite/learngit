一：从用户角度看数据库管理系统的功能：
	1：定义数据库中table的名称，标题（内含的属性名称及对该属性的值得要求）等
	DBMS提供了一套数据定义语言，用户使用DDL（DataDefinitonLanguage）描述索要建立表的格式，DBMS依照用户的定义，创建数据库及其中的Table
	2：数据库操纵：向数据库的Table中增删改查等。DBMS提供了一套数据操纵语言DataManipulationLanguage给用户，用户使用DML描述其所要
	进行的增删改查操作；然后DBMS解析DML语言，并执行相应的操作。
	
	git也是一样，每当你觉得文件修改到一定程度的时候，就可以保存一个快照，这个快照在Git中被称为commit。
	我们可以选择回退到某一个版本。
	git add 自己的文件               表示把工作区的内容添加到版本库的暂存区中。 这样在git commit之后就可以被git管理了。
	每一次修改工作区后都要git add来吧工作区的修改添加到暂存区中，然后再commit。
	每次修改，如果不用git add到暂存区，那就不会加入到commit中。
	git commit -m "自定义的字符串"   表示提交当前的修改 -m意思是当前版本的描述信息，方便自己和他人查看
	git diff     表示查看当前版本和上一个版本的差异信息  是unix的标准合并diff格式。
	git status可以查看当前版本的状态
	git log查看提交版本信息记录
	git reset -- hard HEAD^回退到上一个commit的版本
	之后再用git log显示会显示从上一次开始提交的id号， 但我们如果想要回退到最新的那一版，可以使用git reset --hard 版本号。
	这时候可以通过git reflog显示版本号。git提供了一个命令git reflog来记录你的每一次命令。这样可以查看每一次的操作 和回退的版本id。
	
	
	git add把文件添加进去，实际上就是把文件修改添加到暂存区
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支
	
	
	use "git add <file>..." to update what will be committed)
	use "git checkout -- <file>..." to discard changes in working directory
	

	
	git config --global user.name "lc"
	git config --global user.email "987124487@qq.com"
	
	
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	
	
	
	git分支:
	在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
	截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
	HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支
